[
  {
    "objectID": "dailyex21.html",
    "href": "dailyex21.html",
    "title": "ESS 330 - Daily Exercise 21",
    "section": "",
    "text": "Library Code\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(tidymodels)\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.7     ✔ rsample      1.2.1\n✔ dials        1.3.0     ✔ tune         1.2.1\n✔ infer        1.0.7     ✔ workflows    1.1.4\n✔ modeldata    1.4.0     ✔ workflowsets 1.1.0\n✔ parsnip      1.2.1     ✔ yardstick    1.3.2\n✔ recipes      1.1.1     \n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ recipes::fixed()  masks stringr::fixed()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Learn how to get started at https://www.tidymodels.org/start/\n\nlibrary(tsibble)\n\nRegistered S3 method overwritten by 'tsibble':\n  method               from \n  as_tibble.grouped_df dplyr\n\nAttaching package: 'tsibble'\n\nThe following object is masked from 'package:lubridate':\n\n    interval\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, union\n\nlibrary(feasts)\n\nLoading required package: fabletools\n\nAttaching package: 'fabletools'\n\nThe following object is masked from 'package:yardstick':\n\n    accuracy\n\nThe following object is masked from 'package:parsnip':\n\n    null_model\n\nThe following objects are masked from 'package:infer':\n\n    generate, hypothesize\n\nlibrary(dataRetrieval)\nlibrary(plotly)\n\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n\n\n\n\nData Import\n\n# Example: Cache la Poudre River at Mouth (USGS site 06752260)\npoudre_flow &lt;- readNWISdv(siteNumber = \"06752260\",    # Download data from USGS for site 06752260\n                          parameterCd = \"00060\",      # Parameter code 00060 = discharge in cfs)\n                          startDate = \"2013-01-01\",   # Set the start date\n                          endDate = \"2023-12-31\") |&gt;  # Set the end date\n  renameNWISColumns() |&gt;                              # Rename columns to standard names (e.g., \"Flow\", \"Date\")\n  mutate(Date = yearmonth(Date)) |&gt;                   # Convert daily Date values into a year-month format (e.g., \"2023 Jan\")\n  group_by(Date) |&gt;                                   # Group the data by the new monthly Date\n  summarise(Flow = mean(Flow))                       # Calculate the average daily flow for each month\n\nGET:https://waterservices.usgs.gov/nwis/dv/?site=06752260&format=waterml%2C1.1&ParameterCd=00060&StatCd=00003&startDT=2013-01-01&endDT=2023-12-31\n\n\n\n\nConverting Data Frame and Extracting Components\n\n# Converting to Tibble Frame\ntibble_poudre &lt;- as_tibble(poudre_flow) |&gt; \n  as_tsibble(index = Date)\n\n# Creating Model\npoudre_decomp &lt;- tibble_poudre |&gt;\n  model(STL(Flow ~ season(window = \"periodic\")))\n\n# Extracting Components\npoudre_components &lt;- components(poudre_decomp)\n\n\n\nPlotting the Time Series Analysis\n\n# Plotting Data Series \npoudre_plot &lt;- poudre_components |&gt; \n  autoplot() +\n  labs(title = \"STL Decomposition of Poudre Flow\",\n       y = \"Flow (cfs)\", x = \"Date\") +\n  theme_minimal()\n\npoudre_plot\n\n\n\n\n\n\n\n# Animating the Plot\npoudre_plotly &lt;- ggplotly(poudre_plot)\n\npoudre_plotly\n\n\n\n\n\n\n\nVisualizing Seasonal Patterns\n\npoudre_subseries &lt;- tibble_poudre |&gt; \n  gg_subseries(Flow) +\n  labs(title = \"Seasonal Subseries Plot of Poudre River Flow\",\n       y = \"Average Flow (cfs)\", x = \"Month\") +\n  theme_minimal()\n\npoudre_subseries\n\n\n\n\n\n\n\n\n\n\nData Analysis\n\nWith each of the time series plots, we can clearly see that there is a spike in the flow of the gauge around May and June. This makes sense as this is when the heaviest amount of rain is typically found in Northern Colorado. There is also the fact that over the years, there is an overall decrease in the amount of flow, meaning that there is less precipitation to help initiate flow. The sub-series allows for the data to be sorted by the months rather than a linear, and shows if there is any outliers that may screw the analysis of the seasons. We can see this specifically in September and slightly in April, but with all of the data sorted by month, we can see the average flow for each month and easily find the season with the highest amount of flow."
  }
]